# This is the config file that Alenka looks for by default. You can use --config
# to redirect to a different config file, or you can temporarily override these
# settings from the command line.

# This lets you switch to touch-screen/tablet mode that adjusts some settings
# for better user experience (like button and scrollbar sizes). Allowed values
# are: desktop, tablet, tablet-full. Tablet-full switches to full-screen when
# opening Elko. If you experience problems with the full screen mode
# (flickering, tearing, or freezing) you tablet mode instead.
mode = desktop

# This string is passed to QLocale to set the global locale. This effects
# number, date and time formats. Example values are: en_us, cs_cz.
locale = en_us

# If 1, no calibration of signal samples is performed and the values are read
# as they are stored in the GDF file.
uncalibratedGDF = 0

# How many seconds should it take between consecutive auto-saves. If less then
# or equal to 0, auto-save function is disabled.
autosave = 120

# This controls the size of the cache that stores montage formulas in memory.
kernelCacheSize = 10000

# Use this to save the content of the kernel cache on the file system so that
# the montages don't need to be recompiled after every restart of Alenka.
# Newer Nvidia drivers do this by themselves so this yelds no benefit.
# Sometimes mixing up cache files for different devices can cause crashes.
# Similar situation arises from damaged or stale files. Solve this by deleting
# the file manually. If the problems persist try disabling this.
kernelCachePersist = 0

# Change the cache file search directory. If not set, the installation directory
# is used.
#kernelCacheDir =

# Fall back to OpenGL 2.0 interface for compatibility. Only 2.0 interface and
# ARB_vertex_array_object extension is used. This can help solve some problems
# on very old systems.
gl20 = 0

# Turn on an optimization that requires OpenGL 4.3. This reduces GPU memory
# needed for rendering by half.
gl43 = 0

# Fall back to OpenCL 1.1 interface. This may help with some compatibility
# issues on older hardware.
cl11 = 0

# This flag turns on an optimization that allows direct access from OpenCL to
# an OpenGL buffer. If disabled, every time a signal block is processed, it
# needs to be copied to RAM and then back to the GPU, which may significantly
# slow down signal processing. This feature is provided by the cl_khr_gl_sharing
# extension. Turning this feature off may solve some compatibility problems.
# You will want to turn this off when using the default Linux graphics driver
# Mesa as it doesn't seem to support this extension (for example when using
# VirtualBox).
glSharing = 1

# These options allow you to switch between available OpenCL platforms and
# devices. You can use --clInfo to get a list of them and their details.
clPlatform = 0
clDevice = 0

# This controls the size of blocks that the signal is processed in. The value
# means how many samples are in one block; the number of channels is independent
# of this setting. It doesn't have to be a power of 2 (although FFT is most
# efficient if it is), but it should be factorisable into small integers. These
# values are all fine: 500, 10000, 13000.
blockSize = 16384 # 16*1024 = 2^14

# GPU memory usage limit in MB. The default is 75% of total available memory.
# The memory is allocated dynamically so you might still be able to run multiple
# instances of this program simultaneously. If you want to make sure, use
# --clInfo to tell you the total and then set this option to some fraction of
# this number.
gpuMemorySize = 0

# How many parallel OpenCL queues to use to process signal blocks.
parProc = 2

# How many MB of RAM can be used to cache signal data in files that need to be
# read every time you change the filter or switch between montages. If you
# experience lag during these operations this option can help. On a high
# performance machine it is usually superfluous as the OS already caches disk
# access on its own, but if you have RAM to spare it can't hurt.
fileCacheSize = 0

# The frequency of the first notch for the power interference filter.
notchFrequency = 50

# A list of resolution combo box options. It's a string of doubles separated by
# spaces.
resOptions = 1 2 5 7.5 10 20 50 75 100 200 500 750

# These options control the screenshot location and file format. Allowed values
# are jpg, png, or bmp.
#screenPath =
screenType = png

# These options control expected MAT-file variable names. Change these if your
# files use a different format. Only the data variable is required; default
# values are used in case the other variables are missing. All input files are
# scanned for these variables in the order in which they appear. All events and
# data variables are read, and other variables use only the first value found.
# More than one data variable name can be specified. This can be useful if you
# want to browse multiple files at once as if all the data came from a single
# file. You can use the dot syntax to access variables in structures. Avoid
# MAT-files v7 if you can, due to very poor random access performance; MAT-file
# version 7.3 is recommended.
matData = d
matFs = fs
matMults = mults
matDate = tabs
matLabel = header.label
matEvtPos = out.pos
matEvtDur = out.dur
matEvtChan = out.chan

# The following settings control the default values for Spikedet analysis. These
# settings can be changed on a per file basis via the settings dialog in the
# program.

# low frequency of filtering
fl = 10

# high frequency of filtering
fh = 60

# threshold value for obvious spike decision
k1 = 3.65

# defines ambiguous spike threshold. Ambiguous spike is accepted, when
# simultaneous obvious detection is in other channel k1 >= k2
k2 = 3.65

# decrease the threshold value (0 in DEFAULT) k1*(mode+median)-k3*(mean-mode);
k3 = 0

# winsize - size of segment in sample around spike for background definition
w = 5

# noverlap - overlap of segment in sample or absolute (novelap=0.9 ~ 90%)
n = 4

# buffer - value  of length subsection of signal for batch analysis in seconds.
# High value with combination of parallel computing, many analyzed channels is
# memory-consuming. Minimally 10x winsize time is recommended.
buf = 300

# main_hum_freq - main hum frequency in Hz
h = 50

# time between spikes in events
dt = 0.005

# polyspike union time: spike in same channel nearest then time will be united
pt = 0.12

# allows signal resampling (frequency in Hz) before processing
dec = 200

# Spike event duration in seconds.
sed = 0.1

# Use original implementation instead of the new version with optimized
# resampling. The new version has slight inaccuracies as compared to the Matlab
# reference code.
osd = 1
